#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node src/scripts/createAdmin.js [options]
 */

require('dotenv').config()
const readline = require('readline')
const AdminUser = require('../models/AdminUser')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve)
  })
}

function questionPassword(prompt) {
  return new Promise((resolve) => {
    process.stdout.write(prompt)
    process.stdin.setRawMode(true)
    process.stdin.resume()
    process.stdin.setEncoding('utf8')
    
    let password = ''
    
    process.stdin.on('data', function(char) {
      char = char + ''
      
      switch(char) {
        case '\n':
        case '\r':
        case '\u0004':
          process.stdin.setRawMode(false)
          process.stdin.pause()
          process.stdout.write('\n')
          resolve(password)
          break
        case '\u0003':
          process.exit()
          break
        case '\u007f': // backspace
          if (password.length > 0) {
            password = password.slice(0, -1)
            process.stdout.write('\b \b')
          }
          break
        default:
          password += char
          process.stdout.write('*')
          break
      }
    })
  })
}

async function createAdminUser() {
  try {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n')

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const email = await question('Email: ')
    if (!email || !email.includes('@')) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')
    }

    const password = await questionPassword('–ü–∞—Ä–æ–ª—å: ')
    if (!password || password.length < 6) {
      throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
    }

    const name = await question('–ò–º—è: ')
    if (!name) {
      throw new Error('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }

    const phone = await question('–¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ')

    console.log('\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:')
    console.log('1. Super Admin (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)')
    console.log('2. Beach Admin (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª—è–∂–µ–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏)')
    console.log('3. Moderator (–¥–æ—Å—Ç—É–ø –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –ø–ª—è–∂–∞–º)')
    
    const roleChoice = await question('–í—ã–±–æ—Ä (1-3): ')
    
    let role
    switch(roleChoice) {
      case '1':
        role = 'super_admin'
        break
      case '2':
        role = 'beach_admin'
        break
      case '3':
        role = 'moderator'
        break
      default:
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏')
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:')
    console.log(`Email: ${email}`)
    console.log(`–ò–º—è: ${name}`)
    console.log(`–¢–µ–ª–µ—Ñ–æ–Ω: ${phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`)
    console.log(`–†–æ–ª—å: ${role}`)

    const confirm = await question('\n–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (y/N): ')
    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
      process.exit(0)
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    
    const userData = {
      email,
      password,
      name,
      phone: phone || null,
      role,
      created_by: null // –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç–æ–º
    }

    const newUser = await AdminUser.create(userData)

    console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    console.log(`ID: ${newUser.id}`)
    console.log(`Email: ${newUser.email}`)
    console.log(`–ò–º—è: ${newUser.name}`)
    console.log(`–†–æ–ª—å: ${newUser.role}`)
    console.log(`–°–æ–∑–¥–∞–Ω: ${newUser.created_at}`)

    // –î–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ –ø–ª—è–∂–µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–ª—è–∂–∞–º
    if (role === 'super_admin' || role === 'beach_admin') {
      console.log('\nüèñÔ∏è –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª—è–∂–∞–º...')
      
      const pool = require('../config/database')
      const beachesResult = await pool.query('SELECT id, name FROM beaches')
      
      if (beachesResult.rows.length > 0) {
        for (const beach of beachesResult.rows) {
          await AdminUser.grantBeachAccess(newUser.id, beach.id, newUser.id)
          console.log(`‚úì –î–æ—Å—Ç—É–ø –∫ –ø–ª—è–∂—É "${beach.name}" –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω`)
        }
      } else {
        console.log('‚ÑπÔ∏è –ü–ª—è–∂–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
      }
    }

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
    if (role === 'moderator') {
      console.log('\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª—è–∂–∞–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    }

  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞:', error.message)
    
    if (error.constraint === 'admin_users_email_key') {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }
    
    process.exit(1)
  } finally {
    rl.close()
    process.exit(0)
  }
}

async function listAdminUsers() {
  try {
    console.log('üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n')
    
    const pool = require('../config/database')
    const result = await pool.query(`
      SELECT id, email, name, phone, role, is_active, 
             last_login, created_at
      FROM admin_users 
      ORDER BY created_at DESC
    `)

    if (result.rows.length === 0) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }

    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê')
    console.log('‚îÇ Email                                   ‚îÇ –ò–º—è                      ‚îÇ –†–æ–ª—å           ‚îÇ –ê–∫—Ç–∏–≤–µ–Ω     ‚îÇ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥      ‚îÇ')
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§')

    for (const user of result.rows) {
      const email = user.email.padEnd(39)
      const name = (user.name || '').padEnd(24)
      const role = user.role.padEnd(14)
      const active = (user.is_active ? '–î–∞' : '–ù–µ—Ç').padEnd(11)
      const lastLogin = user.last_login 
        ? new Date(user.last_login).toLocaleString('ru-RU').padEnd(19)
        : '–ù–∏–∫–æ–≥–¥–∞'.padEnd(19)

      console.log(`‚îÇ ${email} ‚îÇ ${name} ‚îÇ ${role} ‚îÇ ${active} ‚îÇ ${lastLogin} ‚îÇ`)
    }

    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò')
    console.log(`\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.rows.length}`)

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:', error.message)
  }
}

async function main() {
  const args = process.argv.slice(2)
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üîê –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node src/scripts/createAdmin.js [command]

–ö–æ–º–∞–Ω–¥—ã:
  (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)  - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  --list, -l        - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  --help, -h        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node src/scripts/createAdmin.js
  node src/scripts/createAdmin.js --list
    `)
    process.exit(0)
  }

  if (args.includes('--list') || args.includes('-l')) {
    await listAdminUsers()
    process.exit(0)
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await createAdminUser()
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
}

module.exports = { createAdminUser, listAdminUsers }