require('dotenv').config()

const express = require('express')
const http = require('http')
const cors = require('cors')
const helmet = require('helmet')
const compression = require('compression')

const beachRoutes = require('./routes/beaches')
const loungerRoutes = require('./routes/loungers')
const bookingRoutes = require('./routes/bookings')
const authRoutes = require('./routes/auth')
const adminRoutes = require('./routes/admin')
const { errorHandler, notFound } = require('./middleware/errorHandler')
const WebSocketServer = require('./websocket/server')
const CronController = require('./controllers/cronController')

const app = express()
const server = http.createServer(app)
const PORT = process.env.PORT || 5000

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
const wsServer = new WebSocketServer(server)

// –î–æ–±–∞–≤–ª—è–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
global.wsServer = wsServer

// Middleware
app.use(helmet())
app.use(compression())
app.use(cors({
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç curl –∏–ª–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
    if (!origin) {
      return callback(null, true)
    }
    
    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins
    const allowedOrigins = [
      process.env.CORS_ORIGIN || 'http://localhost:3000',
      'http://localhost:3000',
      'http://127.0.0.1:3000',
      'http://89.111.169.184:3000',
      'https://89.111.169.184:3000'
    ]
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ localhost –∏ 127.0.0.1
    if (process.env.NODE_ENV === 'development') {
      if (origin.includes('localhost') || origin.includes('127.0.0.1')) {
        return callback(null, true)
      }
    }
    
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true)
    } else {
      console.log('CORS blocked origin:', origin)
      callback(null, true) // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }
  },
  credentials: true
}))
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true, limit: '10mb' }))

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development
if (process.env.NODE_ENV === 'development') {
  app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`)
    next()
  })
}

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  })
})

// API routes
app.use('/api/beaches', beachRoutes)
app.use('/api/loungers', loungerRoutes)
app.use('/api/bookings', bookingRoutes)
app.use('/api/auth', authRoutes)
app.use('/api/admin', adminRoutes)

// –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: 'Beach Booking Service API',
    version: '1.0.0',
    endpoints: {
      beaches: '/api/beaches',
      loungers: '/api/loungers',
      bookings: '/api/bookings',
      auth: '/api/auth',
      admin: '/api/admin',
      health: '/health'
    }
  })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use(notFound)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler)

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
  process.exit(0)
})

process.on('SIGINT', () => {
  console.log('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
  process.exit(0)
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, '0.0.0.0', () => {
  console.log(`üèñÔ∏è  Beach Booking API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üìù –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`)
  console.log(`üîó Health check: http://localhost:${PORT}/health`)
  console.log(`üîå WebSocket: ws://localhost:${PORT}/ws`)
  console.log(`üë• WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤: ${wsServer.clientCount}`)
  
  // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
  console.log(`‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`)
  
  // –ó–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
  setTimeout(() => {
    CronController.updateExpiredBookings().catch(console.error)
  }, 10000) // —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
  
  // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(() => {
    CronController.updateExpiredBookings().catch(console.error)
  }, 5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç
})