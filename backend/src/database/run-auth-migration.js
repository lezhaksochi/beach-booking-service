const fs = require('fs')
const path = require('path')
require('dotenv').config()

const pool = require('../config/database')

async function runAuthMigration() {
  const client = await pool.connect()
  
  try {
    console.log('üîê –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
    
    // Start transaction
    await client.query('BEGIN')
    
    // Check if users table already exists
    const tableCheck = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'users'
      );
    `)
    
    if (tableCheck.rows[0].exists) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    } else {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...')
      await client.query(`
        CREATE TABLE users (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          phone VARCHAR(20) NOT NULL UNIQUE,
          password VARCHAR(255) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `)
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞')
    }
    
    // Check if user_id column exists in bookings
    const columnCheck = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'bookings' 
        AND column_name = 'user_id'
      );
    `)
    
    if (columnCheck.rows[0].exists) {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id –≤ bookings —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    } else {
      console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ user_id –≤ —Ç–∞–±–ª–∏—Ü—É bookings...')
      await client.query('ALTER TABLE bookings ADD COLUMN user_id UUID REFERENCES users(id);')
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ bookings')
    }
    
    // Make customer fields optional
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ bookings...')
    try {
      await client.query('ALTER TABLE bookings ALTER COLUMN customer_name DROP NOT NULL;')
      await client.query('ALTER TABLE bookings ALTER COLUMN customer_phone DROP NOT NULL;')
      await client.query('ALTER TABLE bookings ALTER COLUMN customer_email DROP NOT NULL;')
      console.log('‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è NOT NULL —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–ª–µ–π customer_*')
    } catch (error) {
      console.log('‚ÑπÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è NOT NULL —É–∂–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏')
    }
    
    // Create indexes
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...')
    try {
      await client.query('CREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone);')
      await client.query('CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON bookings(user_id);')
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã')
    } catch (error) {
      console.log('‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç')
    }
    
    // Add trigger for users table
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è users...')
    try {
      await client.query(`
        CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
      `)
      console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è users —Å–æ–∑–¥–∞–Ω')
    } catch (error) {
      console.log('‚ÑπÔ∏è –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è users —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }
    
    // Update lounger_type enum
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ enum lounger_type...')
    try {
      // Check if the enum needs updating
      const enumCheck = await client.query(`
        SELECT enumlabel FROM pg_enum 
        WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'lounger_type')
        AND enumlabel = 'sunbed';
      `)
      
      if (enumCheck.rows.length > 0) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ enum lounger_type —Å sunbed –Ω–∞ chair...')
        await client.query('ALTER TYPE lounger_type RENAME TO lounger_type_old;')
        await client.query("CREATE TYPE lounger_type AS ENUM ('chair', 'bungalow');")
        await client.query('ALTER TABLE loungers ALTER COLUMN type TYPE lounger_type USING type::text::lounger_type;')
        await client.query('DROP TYPE lounger_type_old;')
        console.log('‚úÖ Enum lounger_type –æ–±–Ω–æ–≤–ª–µ–Ω')
      } else {
        console.log('‚ÑπÔ∏è Enum lounger_type —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
      }
    } catch (error) {
      console.log('‚ÑπÔ∏è Enum lounger_type —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error.message)
    }
    
    // Commit transaction
    await client.query('COMMIT')
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    
    // Test the users table
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...')
    const testResult = await pool.query('SELECT COUNT(*) FROM users;')
    console.log(`üìä –í —Ç–∞–±–ª–∏—Ü–µ users: ${testResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`)
    
  } catch (error) {
    await client.query('ROLLBACK')
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    client.release()
  }
}

if (require.main === module) {
  runAuthMigration()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}

module.exports = runAuthMigration